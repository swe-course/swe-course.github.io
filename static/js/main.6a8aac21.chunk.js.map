{"version":3,"sources":["media/brand.png","media/sonar.png","media/jenkins.png","media/docker.png","media/nginx.png","components/Navbar/Navbar.js","components/Footer/Footer.js","pages/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","Nav","className","href","this","props","hostUrl","src","brand","alt","titleShort","titleLong","React","Component","Footer","version","Home","sonarLogo","jenkinsLogo","dockerLogo","nginxLogo","map","l","li","key","toString","document","body","classList","add","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mUCMtBC,E,iLAEjB,OACE,kBAACC,EAAA,EAAD,CAAKC,UAAU,4DACb,uBAAGA,UAAU,eAAeC,KAAMC,KAAKC,MAAMC,SAC3C,yBAAKJ,UAAU,eAAeK,IAAKC,IAAOC,IAAI,KAC9C,0BAAMP,UAAU,kBAAkBE,KAAKC,MAAMK,YAC7C,0BAAMR,UAAU,iCAAiCE,KAAKC,MAAMM,YAE9D,kBAACV,EAAA,EAAD,CAAKC,UAAU,yBAAf,YAGA,kBAACD,EAAA,EAAD,CAAKC,UAAU,OACb,kBAAC,IAAD,Y,GAb0BU,IAAMC,WCJrBC,E,iLAEjB,OACE,4BAAQZ,UAAU,oCAChB,2BAAOA,UAAU,uBAAuBE,KAAKC,MAAMU,c,GAJvBH,IAAMC,W,4ECKrBG,E,iLAEjB,OACE,yBAAKd,UAAU,mDACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wBACb,uBAAGA,UAAU,QAAb,uMAOJ,yBAAKA,UAAU,OACZ,CAACe,IAAWC,IAAaC,IAAYC,KAAWC,KAAI,SAACC,EAAGC,GAAJ,OACnD,yBAAKC,IAAKD,EAAGE,WAAYvB,WAAkB,GAAJqB,EAAO,cAAc,IAAM,aAChE,yBAAKrB,UAAU,aAAaK,IAAKe,EAAGb,IAAI,gB,GAjBtBG,IAAMC,WCCxCa,SAASC,KAAKC,UAAUC,IAAI,kBAAmB,MAAO,SAevCC,MAbf,WACE,OACE,yBAAK5B,UAAU,gCACb,kBAAC,EAAD,CAAQI,QAAQ,IAAII,WAAW,eAAeC,UAAU,qCACxD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,IAAIC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,QAAQC,UAAWjB,KAEvC,kBAAC,EAAD,CAAQD,QAAQ,eCNFmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFd,SAASe,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6a8aac21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brand.c08f21de.png\";","module.exports = __webpack_public_path__ + \"static/media/sonar.de96eee8.png\";","module.exports = __webpack_public_path__ + \"static/media/jenkins.403b3a97.png\";","module.exports = __webpack_public_path__ + \"static/media/docker.fa940253.png\";","module.exports = __webpack_public_path__ + \"static/media/nginx.34eea6b2.png\";","import React from 'react';\r\nimport './Navbar.css';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport brand from './../../media/brand.png';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nexport default class Navbar extends React.Component {\r\n  render() {\r\n    return (\r\n      <Nav className=\"navbar navbar-light bg-light p-0 pl-4 pr-4 border-bottom\">\r\n        <a className=\"navbar-brand\" href={this.props.hostUrl}>\r\n          <img className=\"Navbar__logo\" src={brand} alt=\"\"></img>\r\n          <span className=\"pl-3 d-sm-none\">{this.props.titleShort}</span>\r\n          <span className=\"pl-3 d-none d-sm-inline-block\">{this.props.titleLong}</span>\r\n        </a>\r\n        <Nav className=\"nav text-black d-none\">\r\n          UA, Kyiv\r\n        </Nav>\r\n        <Nav className=\"nav\">\r\n          <MenuIcon/>\r\n        </Nav>\r\n      </Nav>\r\n    );\r\n  }\r\n}","import React from 'react';\r\n\r\nexport default class Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"mt-auto bg-light pb-2 text-right\">\r\n        <small className=\"text-secondary pr-2\">{this.props.version}</small>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Home.css';\r\nimport sonarLogo from './../../media/sonar.png';\r\nimport jenkinsLogo from './../../media/jenkins.png';\r\nimport dockerLogo from './../../media/docker.png';\r\nimport nginxLogo from './../../media/nginx.png';\r\n\r\nexport default class Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"jumbotron bg-light border-0 rounded-0 pb-4 mb-0\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"offset-sm-2 col-sm-8\">\r\n              <p className=\"pb-4\">\r\n                Ready to use react template with navbar, sticky footer and simple routing.\r\n                Skeleton contains SonarQube configuration file, Jenkinsfile for PR/PUSH builds,\r\n                Dockerfile for quick start with Nginx.\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <div className=\"row\">\r\n            {[sonarLogo, jenkinsLogo, dockerLogo, nginxLogo].map((l, li) => \r\n              <div key={li.toString()} className={ ((li==0)?'offset-sm-2':'') + \" col-sm-2\"}>\r\n                <img className=\"Tool__logo\" src={l} alt=\"\"></img>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route/*, Link, Redirect*/ } from 'react-router-dom';\r\nimport './App.css';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport Footer from './components/Footer/Footer';\r\n\r\nimport Home from './pages/Home/Home';\r\n\r\ndocument.body.classList.add('container-fluid', 'p-0', 'h-100');\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App d-flex flex-column h-100\">\r\n      <Navbar hostUrl=\".\" titleShort=\"MVTs - React\" titleLong=\"Minimum Viable Templates - React\"/>\r\n      <Switch>\r\n        <Route exact path='/' component={Home} />\r\n        <Route exact path='/home' component={Home} />\r\n      </Switch>\r\n      <Footer version=\"v19.12.0\"/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render((\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>),\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}